#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class SQLFormatter < Racc::Parser

module_eval(<<'...end sql_formatter.y/module_eval...', 'sql_formatter.y', 32)

  def initialize
    @result     = []
    @parsed_sql = nil
  end

  def parse(str)
    @q = []
    until str.empty?
      case str
      when /^\s+/
      when /^SELECT/i
        @q.push [:SELECT, $&]
      when /^\*|^.+(?=\s+FROM)/i
        @q.push [:SELECT_LIST, $&]
      when /(?=^FROM\s+.+?(\s+(?:WHERE|ORDER\sBY|HAVING|GROUP\sBY|LIMIT))|)^(FROM)\s+(.+?)(?(1)(?=\s+(?:WHERE|ORDER\sBY|HAVING|GROUP\sBY|LIMIT))|)/i # ((cond)truepat|falsepat) condには、後方参照の数字を入れる。
        @q.push [:FROM,           $2]
        @q.push [:FROM_CONDITION, $3]
      when /(?=^WHERE\s+.+?(\s+(?:ORDER\sBY|HAVING|GROUP\sBY|LIMIT))|)^(WHERE)\s+(.+?)(?(1)(?=\s+(?:ORDER\sBY|HAVING|GROUP\sBY|LIMIT))|)/i
        @q.push [:WHERE,           $2]
        @q.push [:WHERE_CONDITION, $3]
      when /(?=^ORDER\sBY\s+.+?(\s+(?:HAVING|GROUP\sBY|LIMIT))|)^(ORDER\sBY)\s+(.+?)(?(1)(?=\s+(?:HAVING|GROUP\sBY|LIMIT))|)/i
        @q.push [:ORDER_BY,           $2]
        @q.push [:ORDER_BY_CONDITION, $3]
      when /(?=^HAVING\s+.+?(\s+(?:GROUP\sBY|LIMIT))|)^(HAVING)\s+(.+?)(?(1)(?=\s+(?:GROUP\sBY|LIMIT))|)/i
        @q.push [:HAVING,           $2]
        @q.push [:HAVING_CONDITION, $3]
      when /(?=^GROUP\sBY\s+.+?(\s+(?:LIMIT))|)^(GROUP\sBY)\s+(.+?)(?(1)(?=\s+(?:LIMIT))|)/i
        @q.push [:GROUP_BY,           $2]
        @q.push [:GROUP_BY_CONDITION, $3]
      when /^(LIMIT)\s+(.+)/i
        @q.push [:LIMIT,           $1]
        @q.push [:LIMIT_CONDITION, $2]
      end
      str = $'
    end
    @q.push [false, '$end']
    @parsed_sql = do_parse
  end

  def next_token
    @q.shift
  end

  def parsed_sql
    @parsed_sql
  end

  def format(sql_arr=parsed_sql, i=0)
    sql_arr.each do |e|
      if e.is_a?(Array)
        format(e, i)
        i = 0
      else
        puts " " * i + e
        i += 2
      end
    end
  end
...end sql_formatter.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    12,    13,    14,    15,    16,    12,    13,    14,    15,    16,
    20,    21,    22,    23,    24,    12,    13,    14,    15,    16,
    12,    13,    14,    15,    16,    12,    13,    14,    15,    16,
     2,     3,     5,     6,     9,    17 ]

racc_action_check = [
     8,     8,     8,     8,     8,    10,    10,    10,    10,    10,
    11,    11,    11,    11,    11,    18,    18,    18,    18,    18,
    25,    25,    25,    25,    25,    26,    26,    26,    26,    26,
     0,     1,     2,     3,     4,     9 ]

racc_action_pointer = [
    28,    31,    29,    33,    30,   nil,   nil,   nil,    -6,    30,
    -1,    -1,   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,
   nil,   nil,   nil,   nil,   nil,    14,    19,   nil ]

racc_action_default = [
   -21,   -21,   -21,   -21,   -21,    -2,    28,    -1,    -3,   -21,
    -4,   -21,   -11,   -12,   -13,   -14,   -15,    -9,    -5,   -10,
   -16,   -17,   -18,   -19,   -20,    -6,    -7,    -8 ]

racc_goto_table = [
    10,     1,    18,     4,     7,     8,    19,   nil,   nil,   nil,
    25,   nil,   nil,   nil,   nil,   nil,   nil,    26,    27 ]

racc_goto_check = [
     5,     1,     5,     2,     3,     4,     7,   nil,   nil,   nil,
     5,   nil,   nil,   nil,   nil,   nil,   nil,     5,     5 ]

racc_goto_pointer = [
   nil,     1,     1,     0,     1,    -8,   nil,    -5 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    11,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 17, :_reduce_1,
  1, 18, :_reduce_none,
  1, 19, :_reduce_none,
  2, 19, :_reduce_none,
  3, 19, :_reduce_none,
  4, 19, :_reduce_none,
  5, 19, :_reduce_none,
  6, 19, :_reduce_none,
  2, 20, :_reduce_9,
  2, 21, :_reduce_10,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none ]

racc_reduce_n = 21

racc_shift_n = 28

racc_token_table = {
  false => 0,
  :error => 1,
  :SELECT => 2,
  :SELECT_LIST => 3,
  :FROM => 4,
  :FROM_CONDITION => 5,
  :WHERE => 6,
  :ORDER_BY => 7,
  :HAVING => 8,
  :GROUP_BY => 9,
  :LIMIT => 10,
  :WHERE_CONDITION => 11,
  :ORDER_BY_CONDITION => 12,
  :HAVING_CONDITION => 13,
  :GROUP_BY_CONDITION => 14,
  :LIMIT_CONDITION => 15 }

racc_nt_base = 16

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SELECT",
  "SELECT_LIST",
  "FROM",
  "FROM_CONDITION",
  "WHERE",
  "ORDER_BY",
  "HAVING",
  "GROUP_BY",
  "LIMIT",
  "WHERE_CONDITION",
  "ORDER_BY_CONDITION",
  "HAVING_CONDITION",
  "GROUP_BY_CONDITION",
  "LIMIT_CONDITION",
  "$start",
  "query_expression",
  "select_list",
  "table_expression",
  "from_clause",
  "cond_clause",
  "cond_type",
  "condition" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'sql_formatter.y', 2)
  def _reduce_1(val, _values, result)
    @result.unshift [val[0], [val[1]]]; result = @result
    result
  end
.,.,

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

module_eval(<<'.,.,', 'sql_formatter.y', 13)
  def _reduce_9(val, _values, result)
    @result.unshift [val[0], [val[1]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'sql_formatter.y', 15)
  def _reduce_10(val, _values, result)
    @result.push [val[0], [val[1]]]
    result
  end
.,.,

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SQLFormatter


