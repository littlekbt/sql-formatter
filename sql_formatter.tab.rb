#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class SQLFormatter < Racc::Parser

module_eval(<<'...end sql_formatter.y/module_eval...', 'sql_formatter.y', 40)

  def initialize
    @result     = []
    @parsed_sql = nil
  end

  # clause: String
  # after_clause: Array[String]
  def pattern(clause, after_clause)
     # ((cond)truepat|falsepat) condには、後方参照の数字を入れる。
    regexp = "(?=^#{clause}\s+.+?(\s+(?:#{after_clause.join('|')}))|)^(#{clause})\s+(?(1)(.+?)(?=\s+(?:#{after_clause.join('|')}))|(.+))"
    Regexp.new(regexp, 'i')
  end

  def split_condition(cond)
    cond.split(/(\(|\)|and|or)/i).select{|e|!e.empty? && e != " "}.each do |e|
      e.strip!
      case e
      when '('
        @q.push [:LEFT_BAREN, e]
      when ')'
        @q.push [:RIGHT_BAREN, e]
      when 'AND', 'OR', 'and', 'or'
        @q.push [:CONJUNCTION, e]
      else
        @q.push [:SEARCH_CONDITION, e]
      end
    end
  end

  def parse(str)
    @q = []
    until str.empty?
      after_text = nil
      case str
      when /^\s+/
      when /^SELECT/i
        @q.push [:SELECT, $&]
      when /^\*|^.+(?=\s+FROM)/i
        @q.push [:SELECT_LIST, $&]
      when pattern('FROM', %w(WHERE ORDER\sBY HAVING GROUP\sBY LIMIT))
        cond = $3.nil? ? $4 : $3
        @q.push [:FROM,           $2]
        @q.push [:FROM_CONDITION, cond]
      when pattern('WHERE', %w(ORDER\sBY HAVING GROUP\sBY LIMIT))
        after_text = $'
        @q.push [:WHERE, $2]
        cond = $3.nil? ? $4 : $3
        split_condition(cond)
      when pattern('ORDER\sBY', %w(HAVING GROUP\sBY LIMIT))
        cond = $3.nil? ? $4 : $3
        @q.push [:ORDER_BY,           $2]
        @q.push [:ORDER_BY_CONDITION, cond]
      when pattern('HAVING', %w(GROUP\sBY LIMIT))
        after_text = $'
        @q.push [:HAVING, $2]
        cond = $3.nil? ? $4 : $3
        split_condition(cond)
      when pattern('GROUP\sBY', %w(LIMIT))
        cond = $3.nil? ? $4 : $3
        @q.push [:GROUP_BY,           $2]
        @q.push [:GROUP_BY_CONDITION, cond]
      when /^(LIMIT)\s+(.+)/i
        @q.push [:LIMIT,           $1]
        @q.push [:LIMIT_CONDITION, $2]
      end
      str = after_text || $'
    end
    @q.push [false, '$end']
    @parsed_sql = do_parse
  end

  def next_token
    @q.shift
  end

  def parsed_sql
    @parsed_sql
  end


  # 配列が深くなった時だけ、i += 2する
  # 配列が深くならず表示する時は、iはそのまま
  # ["(", ["a", "and", "b"], ")"] => i = 2, i = 4, i = 2
  # 次の句に行った時はi = 0する。
  def format(sql_arr=parsed_sql, i=0)
    sql_arr.each.with_index do |e, n|
      if e.is_a?(Array)
        format(e, i)
        i = 0
      else
        puts " " * i + e
        if sql_arr[n + 1].is_a?(Array)
          i += 2
        end
      end
    end
  end
...end sql_formatter.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    14,    15,    16,    17,    18,    14,    15,    16,    17,    18,
    22,    23,    24,     2,     3,     5,     6,     9,    19,    26,
    27,    28 ]

racc_action_check = [
     8,     8,     8,     8,     8,    10,    10,    10,    10,    10,
    12,    12,    12,     0,     1,     2,     3,     4,     9,    13,
    25,    27 ]

racc_action_pointer = [
    11,    14,    12,    16,    13,   nil,   nil,   nil,    -6,    13,
    -1,   nil,    -1,     5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     5,   nil,     7,   nil ]

racc_action_default = [
   -20,   -20,   -20,   -20,   -20,    -2,    29,    -1,    -3,   -20,
    -4,    -6,   -20,   -20,   -10,   -11,   -12,   -13,   -14,    -5,
    -7,    -8,   -15,   -16,   -17,    -9,   -18,   -20,   -19 ]

racc_goto_table = [
    11,     1,    20,     4,     7,     8,    10,    21,    25 ]

racc_goto_check = [
     6,     1,     6,     2,     3,     4,     5,     8,    10 ]

racc_goto_pointer = [
   nil,     1,     1,     0,     1,    -2,    -8,   nil,    -5,   nil,
    -5 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,    13,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 17, :_reduce_1,
  1, 18, :_reduce_none,
  1, 19, :_reduce_none,
  2, 19, :_reduce_none,
  2, 20, :_reduce_5,
  1, 21, :_reduce_none,
  2, 21, :_reduce_none,
  2, 22, :_reduce_8,
  2, 22, :_reduce_none,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 25, :_reduce_13,
  1, 25, :_reduce_14,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  1, 26, :_reduce_18,
  3, 26, :_reduce_19 ]

racc_reduce_n = 20

racc_shift_n = 29

racc_token_table = {
  false => 0,
  :error => 1,
  :SELECT => 2,
  :SELECT_LIST => 3,
  :FROM => 4,
  :FROM_CONDITION => 5,
  :ORDER_BY => 6,
  :GROUP_BY => 7,
  :LIMIT => 8,
  :WHERE => 9,
  :HAVING => 10,
  :ORDER_BY_CONDITION => 11,
  :GROUP_BY_CONDITION => 12,
  :LIMIT_CONDITION => 13,
  :SEARCH_CONDITION => 14,
  :CONJUNCTION => 15 }

racc_nt_base = 16

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SELECT",
  "SELECT_LIST",
  "FROM",
  "FROM_CONDITION",
  "ORDER_BY",
  "GROUP_BY",
  "LIMIT",
  "WHERE",
  "HAVING",
  "ORDER_BY_CONDITION",
  "GROUP_BY_CONDITION",
  "LIMIT_CONDITION",
  "SEARCH_CONDITION",
  "CONJUNCTION",
  "$start",
  "query_expression",
  "select_list",
  "table_expression",
  "from_clause",
  "cond_clauses",
  "cond_clause",
  "cond_type",
  "condition",
  "search_cond_type",
  "search_conditions" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'sql_formatter.y', 2)
  def _reduce_1(val, _values, result)
    @result.unshift [val[0], [val[1]]]; result = @result
    result
  end
.,.,

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'sql_formatter.y', 9)
  def _reduce_5(val, _values, result)
    @result.push [val[0], [val[1]]]
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'sql_formatter.y', 15)
  def _reduce_8(val, _values, result)
    @result.push [val[0], [val[1]]]
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'sql_formatter.y', 22)
  def _reduce_13(val, _values, result)
    @result.push [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'sql_formatter.y', 23)
  def _reduce_14(val, _values, result)
    @result.push [val[0]]
    result
  end
.,.,

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'sql_formatter.y', 29)
  def _reduce_18(val, _values, result)
    p "search_condtions #{val}"; @result.last.push [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'sql_formatter.y', 32)
  def _reduce_19(val, _values, result)
    p "search_conditions conjunction search_conditions #{val}";@result.last.last.push val[1]; @result.last.last.push val[2]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SQLFormatter


